#! /usr/bin/php

<?php
if ($argc < 2 || !is_numeric($argv[1])) {
    echo "Usage: php wire <port>\n";
    exit(1);
}

$port = intval($argv[1] ?? '8080');
$directory = __DIR__ . '/public';

if (!($socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {
    die('Error creating socket');
}

if (!socket_bind($socket, '127.0.0.1', $port)) {
    die('Error binding socket to address and port');
}

if (!socket_listen($socket)) {
    die('Error listening on socket');
}

echo "Server listening on port $port\n";

while (true) {
    if (!($client = socket_accept($socket))) {
        die('Error accepting connection');
    }

    $request = socket_read($client, 4096);

    preg_match("/GET \/(\S*)/", $request, $matches);
    $filename = $matches[1] ?? 'index.html';
    $filePath = $directory . '/' . $filename;

    if ($filename !== 'index.php' && file_exists($filePath) && is_file($filePath)) {
        $mime = mime_content_type($filePath);
        $response = "HTTP/1.1 200 OK\r\n";
        $response .= "Content-Type: $mime\r\n\r\n";
        $response .= file_get_contents($filePath);
    } else {
        $response = handleRequestWithPHP($request);
    }

    socket_write($client, $response, strlen($response));
    socket_close($client);

}

function handleRequestWithPHP($request): false|string
{
    $cmd = "php public/index.php";

    $requestData = [
        'GET' => $_GET,
        'POST' => $_POST,
        'COOKIE' => $_COOKIE,
        'FILES' => $_FILES,
        'SERVER' => $_SERVER,
        'ENV' => $_ENV,
    ];

    // Build the query string with all superglobals
    $queryString = http_build_query($requestData);

    // Construct the correct command with parameters
    if (!empty($queryString)) {
        $cmd .= '?' . $queryString;
    }

    $descriptorspec = array(
        0 => array("pipe", "r"),
        1 => array("pipe", "w"),
        2 => array("pipe", "w")
    );

    $process = proc_open($cmd, $descriptorspec, $pipes);

    if (is_resource($process)) {
        fwrite($pipes[0], $request);
        fclose($pipes[0]);

        $output = stream_get_contents($pipes[1]);
        fclose($pipes[1]);

        $error = stream_get_contents($pipes[2]);
        fclose($pipes[2]);

        proc_close($process);

        if (!empty($error)) {
            return "HTTP/1.1 500 Internal Server Error\r\n\r\n$error";
        }

        return $output;
    }

    return "HTTP/1.1 500 Internal Server Error\r\n\r\nFailed to execute PHP script";
}
